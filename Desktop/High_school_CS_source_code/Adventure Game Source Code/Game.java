import java.awt.image.BufferedImage;import java.io.IOException;import java.net.URL;import javax.imageio.ImageIO;import javax.swing.*;/** * Class Game - the main class of the adventure game * * *  This is the main class of the adventure game. It does just about everything within the game: it moves the player *  and enemies around the map, it allows the player to fight against enemies, it allows the player to buy, pick up, *  and drop items, view images of items in their inventory, and even eat a hotdog. *   *  Don't quit out of a picture or else it will end the game. *   *   *  @author  Michael Kolling/Steve Aronson *  @version .1 */class Game {    private Parser parser;    Sounds sounds=new Sounds();    public Room currentRoom;    Room previousRoom, storedRoom; //storedRoom stores a "dummy room" of the room the player is in before he starts the go back command    String superMove;    int rand1;    int rand2;    int rand3;    int rand4;    int health;    int lives;    double punchDamage;    double kickDamage;    double specialDamage;    String name;    final private int MAX_WEIGHT=8;    final private int STARTING_$=100;    private double MAX_HEALTH=100;    final private double JOHN_CENA_PUNCH_DAMAGE=15;    final private double JOHN_CENA_KICK_DAMAGE=25;    final private double JOHN_CENA_SUPER_DAMAGE=40;    private int Weight;    int weight;    int cost;    private int balance;    private String backpack;    double Health;    double jPunchDamage;    double jKickDamage;    double jSpecialDamage;    double enemyHealth;    private String attack_history;    private int attack_num;    private String user_attack_history;    private String result;    String enemyString;    String itemString;    boolean alreadyConsumedPop;    boolean alreadyConsumedFizz;    boolean alreadyBoughtTShirt;    boolean alreadyBoughtTicket;    boolean alreadyConsumedHotdog;    boolean hasTicket;    boolean hasKey;    boolean finished;    boolean tripleHAlive;    boolean bigShowAlive;    boolean undertakerAlive;    boolean theRockAlive;    boolean playerAlive;    Command punch, kick, special, defend;    int enemyNumber;    Room outside, TV_van,behind_TV_van,lower_circle_N,lower_stands_N,lower_circle_S, lower_stands_S,ring, stairs_0,stairs_1,stairs_2, Back, roof, basement;    Room keyRoom,mapRoom,sweatBandRoom,tShirtRoom, ticketRoom;    Room enemyRoom;    /**     * Create the game and initialise its internal map.     */    public Game()     {        createRooms();        //createEnemies();        parser = new Parser();        Weight=0;        balance=STARTING_$;        backpack="";        Health=MAX_HEALTH;        jPunchDamage=JOHN_CENA_PUNCH_DAMAGE;        jKickDamage=JOHN_CENA_KICK_DAMAGE;        jSpecialDamage=JOHN_CENA_SUPER_DAMAGE;        attack_history="";        user_attack_history="";        attack_num=1;        result="";        alreadyConsumedPop=false;        alreadyConsumedFizz=false;        alreadyBoughtTicket=false;        alreadyBoughtTShirt=false;        alreadyConsumedHotdog=false;        finished=false;        hasTicket=false;        hasKey=false;        tripleHAlive=true;        bigShowAlive=true;        undertakerAlive=true;        theRockAlive=true;        playerAlive=true;        enemyString="Enemies: None";    }    /**     * Create all the rooms and link their exits together.     */    private void createRooms()    {        //HINT: If you want to access these in other methods, they should be changed to instance variables        // create the rooms        outside = new Room("outside the stadium");        TV_van = new Room("in the TV van");        behind_TV_van=new Room("behind the TV van");        lower_circle_N = new Room("in the north stadium walkway");        lower_stands_N = new Room("in the north bleachers");        lower_circle_S = new Room("in the south stadium walkway");        lower_stands_S = new Room("in the south bleachers");        Back = new Room("in the area behind the stadium");           ring = new Room("in the ring");        stairs_0= new Room("in the stairs on the basement level");        stairs_1=new Room("in the stairs on the first floor");        stairs_2=new Room("in the stairs on the roof level");        roof=new Room("on the roof of the arena");        basement=new Room("in the basement of the arena. This is where the locker room is located");        // initialise room exits        outside.setExits(lower_circle_S, TV_van, null,null,null,null);        TV_van.setExits(null, behind_TV_van, null, outside,null,null);        behind_TV_van.setExits(null,null,null,TV_van,null,null);        lower_circle_S.setExits(lower_circle_N,null,outside,null, null,lower_stands_S);        lower_stands_S.setExits(ring,null,null,null,lower_circle_S,null);        ring.setExits(lower_stands_N,null,lower_stands_S,null,null,null);        lower_circle_N.setExits(Back,stairs_1,lower_circle_S,null,null,lower_stands_N);        lower_stands_N.setExits(null,null,ring,null,lower_circle_N,null);        Back.setExits(null,null,lower_circle_N,null,null,null);        stairs_1.setExits(null,null,null,lower_circle_N,stairs_2,stairs_0);        stairs_2.setExits(null,null,null,roof,null,stairs_1);        roof.setExits(null,stairs_2,null,null,null,null);        stairs_0.setExits(null,null,null,basement,stairs_1,null);        basement.setExits(null,stairs_0,null,null,null,null);        currentRoom = outside;         previousRoom=outside;        storedRoom=outside;        keyRoom=Back;        mapRoom=behind_TV_van;        sweatBandRoom=basement;        tShirtRoom=lower_circle_N;        ticketRoom=outside;        enemyRoom=lower_stands_N;    }    /**     * Creates all the enemies in the game (Triple H, Big Show, The Undertaker, and Dwayne "the rock" Johnson).     */    /*    public void createEnemies()    {    Enemies tripleH=new Enemies(40,1,20,20,30, "super1",1,5,7,7, "Triple H");    Enemies bigShow=new Enemies(80,1,5,15,35, "super2",1,8,4,7, "Big Show");    Enemies theUndertaker=new Enemies(60,1,25,10,40, "super3",2,2,11,5, "The Undertaker");    Enemies theRock=new Enemies(100,1,15,30,50, "super4",3,1,5,11, "Dwayne \"the rock \"Johnson");    }     */    /**     *  Main play routine. Loops until end of play.     */    public void play()     {           System.out.println("\f");        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        currentRoom=outside;        while (!finished)        {            if(!isEnemy())            {                Command command = parser.getCommand();                if(undertakerAlive)                    undertakerMove();                finished = processCommand(command);            }            else             {                Command command = parser.getCommand();                finished = processCommandWithEnemy(command);            }            if(!playerAlive || (!tripleHAlive && !undertakerAlive && !bigShowAlive && !theRockAlive))                break;        }        if(playerAlive && (tripleHAlive || undertakerAlive || bigShowAlive || theRockAlive))            System.out.println("Thank you for playing.  Goodbye.");        else if(!playerAlive)        {            System.out.println("You lose.");        }        else        {            System.out.println("You win!! WWE champ JOHN CENA has successfully defended his ");            System.out.println("belt at the WWE SUPER SLAM!!!");            sounds.cenaSounds();            johnCenaImage();        }    }    /**     * Adds an item to the backpack John Cena is carrying.     */    private void addItem(String item)    {           if(item.equals("key") && currentRoom.equals(keyRoom) && !alreadyHave("key"))        {            weight=2;        }        else if(item.equals("map") && currentRoom.equals(mapRoom) && !alreadyHave("map"))        {            weight=3;        }        else if(item.equals("sweatband") && currentRoom.equals(sweatBandRoom) && !alreadyHave("sweatband"))        {            weight=3;        }        else if(item.equals("ticket") && currentRoom.equals(ticketRoom) && alreadyBoughtTicket && !alreadyHave("ticket"))        {            weight=1;        }        else if(item.equals("T-shirt") && currentRoom.equals(tShirtRoom) && alreadyBoughtTShirt && !alreadyHave("T-shirt"))        {            weight=4;        }        else if( (item.equals("key") && alreadyHave("key")) || (item.equals("sweatband") && alreadyHave("sweatband")) || (item.equals("map") && alreadyHave("map")))        {            weight=0;            System.out.println("You already have this item in your inventory.");        }        else         {            weight=0;            System.out.println("This item is not in the room.");        }        Weight=Weight+weight;        if(Weight>MAX_WEIGHT)        {            Weight=Weight-weight;            System.out.println("The item is too heavy. You need to put something else down first.");        }        else        {            if(weight!=0)            {                  if(item.equals("key"))                    hasKey=true;                backpack=backpack+item+" ";                if(item.equals("sweatband"))                {                    System.out.println("Item added to your inventory. This item does nothing but look AWESOME when taking down enemies.");                }                else                {                    System.out.println("Item added to your inventory.");                }            }        }    }    /**     * Buys items and keeps track of costs. Also adds these bought items to the inventory if they are      * not immediately consumed (power-up drinks are instantly consumed).     */    private void buyItem(String item)    {        if(item.equals("T-shirt") && currentRoom.equals(lower_circle_N) && !alreadyHave("T-Shirt"))        {            weight=4;            cost=20;        }        else if(item.equals("ticket") && currentRoom.equals(outside) && !alreadyHave("ticket"))        {            weight=1;            cost=30;        }        else if(item.equals("power-pop") && currentRoom.equals(lower_circle_N) )        {            weight=0;            cost=40;        }        else if(item.equals("mega-fizz") && currentRoom.equals(lower_circle_S) )        {            weight=0;            cost=20;        }        else if( (item.equals("T-shirt") && alreadyBoughtTShirt)|| (item.equals("ticket") && alreadyBoughtTicket))         {            weight=0;            cost=0;            System.out.println("You have already bought this item.");        }        else         {            weight=0;            cost=0;            System.out.println("This item is not in the room.");        }        Weight=Weight+weight;        balance=balance-cost;        if(Weight<=MAX_WEIGHT && balance>=0)        {            if(weight!=0)            {                if(item.equals("ticket"))                { alreadyBoughtTicket=true;                    hasTicket=true;                }                backpack=backpack+item+" ";                if(item.equals("T-shirt"))                {                    alreadyBoughtTShirt=true;                    Health=MAX_HEALTH;                    jSpecialDamage=jSpecialDamage*2.0;                    System.out.println("Item bought and added to inventory. You have unlocked the ");                    System.out.println("SUPER SLAM attack and your special attack damage has beend doubled.");                }                else                    System.out.println("Item bought and added to your inventory.");            }            else if (item.equals("mega-fizz"))            {                alreadyConsumedFizz=true;                Health=MAX_HEALTH;                System.out.println("Maximum health restored.");            }            else if(item.equals("power-pop"))            {                alreadyConsumedPop=true;                jPunchDamage=jPunchDamage*1.5;                System.out.println("Punch damage increased by 50%.");            }        }        else if(balance>=0)        {            System.out.println("This item is too heavy. It cannot be bought.");               Weight=Weight-weight;            balance=balance+cost;        }        else        {            System.out.println("This item is too expensive. It cannot be bought.");            Weight=Weight-weight;            balance=balance+cost;        }    }    /**     * Removes the item from John Cena's backpack.     */    private void dropItem(String item)    {        if(item.equals("key") && alreadyHave("key"))        {            hasKey=false;            weight=2;        }        else if(item.equals("sweatband") && alreadyHave("sweatband"))            weight=3;        else if(item.equals("map") && alreadyHave("map"))            weight=3;        else if(item.equals("T-shirt") && alreadyHave("T-shirt"))            weight=4;        else if (item.equals("ticket") && alreadyHave("ticket"))        {            hasTicket=false;            weight=1;        }        else         {            weight=0;            System.out.println("This item is not in your inventory.");        }        Weight=Weight-weight;        int i=backpack.indexOf(item);        if(i>=0)        {            String s1=backpack.substring(0,i);            String s2=backpack.substring(i+item.length()+1, backpack.length());            backpack=s1+s2;            changeRoom(item);            System.out.println("Item dropped.");        }    }    /**     * Causes the undertaker, the only mobile enemy, to move.     */    private void undertakerMove()    {        int count=0;        while(count<1)        {            int random=getRandomNumber2(6);            if(random==0) //move north            {                if(enemyRoom.equals(lower_stands_S))                {                    enemyRoom=lower_stands_N;                    count++;                   }                else if(enemyRoom.equals(lower_circle_S))                {                    enemyRoom=lower_circle_N;                    count++;                }            }            else if (random==1) //move south            {                if(enemyRoom.equals(lower_stands_N))                {                    enemyRoom=lower_stands_S;                    count++;                }                else if(enemyRoom.equals(lower_circle_S))                {                    enemyRoom=lower_circle_S;                    count++;                }            }            else if(random==2) //move east            {                if(enemyRoom.equals(basement))                {                    enemyRoom=stairs_0;                    count++;                }                else if(enemyRoom.equals(lower_circle_N))                {                    enemyRoom=stairs_1;                    count++;                }                else if(enemyRoom.equals(roof))                {                    enemyRoom=stairs_2;                    count++;                }                           }            else if(random==3) //move west            {                if(enemyRoom.equals(stairs_0))                {                    enemyRoom=basement;                    count++;                }                else if(enemyRoom.equals(stairs_1))                {                    enemyRoom=lower_circle_N;                    count++;                }                else if(enemyRoom.equals(stairs_2))                {                    enemyRoom=roof;                    count++;                }            }            else if(random==4) //move up            {                if(enemyRoom.equals(stairs_0))                {                    enemyRoom=stairs_1;                    count++;                }                else if(enemyRoom.equals(stairs_1))                {                    enemyRoom=stairs_2;                    count++;                }                else if(enemyRoom.equals(lower_stands_S))                {                    enemyRoom=lower_circle_S;                    count++;                }                 else if(enemyRoom.equals(lower_stands_N))                {                    enemyRoom=lower_circle_N;                    count++;                }            }            else //move down            {                if(enemyRoom.equals(stairs_1))                {                    enemyRoom=stairs_0;                    count++;                }                else if(enemyRoom.equals(stairs_2))                {                    enemyRoom=stairs_1;                    count++;                }                else if(enemyRoom.equals(lower_circle_S))                {                    enemyRoom=lower_stands_S;                    count++;                }                 else if(enemyRoom.equals(lower_circle_N))                {                    enemyRoom=lower_stands_N;                    count++;                }            }        }      }    /**     * Restricts the player from using most of their non-fight commands     * when they are in a room with an enemy.     */    private boolean processCommandWithEnemy(Command command)    {        if(command.isUnknown())        {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help"))            printHelp();        else if (commandWord.equals("quit"))        {            if(command.hasSecondWord())                System.out.println("Quit what?");            else                return true;  // signal that we want to quit        }        else if(commandWord.equals("punch"))        {            if(isEnemy())            {                enemyFight(2);                System.out.println(result);            }            else            {                System.out.println("There are no enemies in this room");            }        }        else if(commandWord.equals("kick"))        {            if(isEnemy())            {                enemyFight(1);                System.out.println(result);            }            else            {                System.out.println("There are no enemies in this room");            }        }        else if(commandWord.equals("special"))        {            if(isEnemy())            {                if(!specialUsedLastFive())                {                    enemyFight(3);                    System.out.println(result);                }                else                    System.out.println("You must wait 5 turns between special attacks.");            }            else            {                System.out.println("There are no enemies in this room");             }        }        else if(commandWord.equals("defend"))        {            if(isEnemy())            {                enemyFight(4);                System.out.println(result);            }            else            {                System.out.println("There are no enemies in this room");             }        }        else        {            System.out.println("This command is not available when you are fighting an enemy.");        }        return false;    }    /**     * Changes the location of an item that is dropped by John Cena.     */    private void changeRoom(String item)    {        if(item.equals("map"))        {            mapRoom=currentRoom;        }        else if(item.equals("key"))        {            keyRoom=currentRoom;        }        else if(item.equals("T-shirt"))        {            tShirtRoom=currentRoom;        }        else if(item.equals("sweatband"))        {            sweatBandRoom=currentRoom;        }        else if(item.equals("ticket"))        {            ticketRoom=currentRoom;        }    }    /**     * Returns true if the item already exists in John Cena's bag.     */    private boolean alreadyHave(String item)    {        if (backpack.indexOf(item)>=0)            return true;          else             return false;    }    /**     * Print out the opening message for the player.     */    private void printWelcome()    {        System.out.println();        System.out.println("Welcome to the WWE SUPER SLAM! Our hero John Cena must defend his title ");        System.out.println("as he battles enemies such as Triple H, the Undertaker, and even Dwayne ");        System.out.println("\"the rock\" Johnson threatening to take his championship belt. Do you ");        System.out.println("have what it takes to defend the title and be crowned WWE WORLD HEAVYWEIGHT ");        System.out.println("CHAMPION? We will find out soon.");        System.out.println("");        System.out.println("Type 'help' to see a list of command words, as well as their functions.");        System.out.println();        System.out.println(currentRoom.longDescription());        System.out.println(enemyString);    }    /**     * Given a command, process (that is: execute) the command.     * If this command ends the game, true is returned, otherwise false is     * returned.     */    private boolean processCommand(Command command)     {        if(command.isUnknown())        {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help"))            printHelp();        else if (commandWord.equals("go"))        {            goRoom(command);        }        else if(commandWord.equals("grab"))        {            if(command.hasSecondWord())            {                String item = command.getSecondWord();                addItem(item);            }            else            {                System.out.println("Grab what?");            }        }        else if(commandWord.equals("drop"))        {            if(command.hasSecondWord())            {                String item = command.getSecondWord();                dropItem(item);            }            else            {                System.out.println("Drop what?");            }        }        else if(commandWord.equals("buy"))        {            if(command.hasSecondWord())            {                String item=command.getSecondWord();                buyItem(item);            }            else            {                System.out.println("Buy what?");            }        }        else if(commandWord.equals("eat"))        {            if(command.hasSecondWord())            {                String item=command.getSecondWord();                if(item.equals("hotdog") && currentRoom.equals(lower_circle_S) && !alreadyConsumedHotdog)                {                    MAX_HEALTH=MAX_HEALTH+20;                    System.out.println("Mmmmmm...tasty. 20 points have been added to your maximum health.");                    alreadyConsumedHotdog=true;                }                else                {                    System.out.println("You cannot eat that item.");                }            }            else            {                System.out.println("Eat what?");            }        }        else if(commandWord.equals("punch"))        {            if(isEnemy())            {                enemyFight(2);                System.out.println(result);            }            else            {                System.out.println("There are no enemies in this room");            }        }        else if(commandWord.equals("kick"))        {            if(isEnemy())            {                enemyFight(1);                System.out.println(result);            }            else            {                System.out.println("There are no enemies in this room");            }        }        else if(commandWord.equals("special"))        {            if(isEnemy())            {                if(!specialUsedLastFive())                {                    enemyFight(3);                    System.out.println(result);                }                else                    System.out.println("You must wait 5 turns between special attacks.");            }            else            {                System.out.println("There are no enemies in this room");             }        }        else if(commandWord.equals("defend"))        {            if(isEnemy())            {                enemyFight(4);                System.out.println(result);            }            else            {                System.out.println("There are no enemies in this room");             }        }        else if(commandWord.equals("look"))        {            System.out.println(itemString());        }        else if(commandWord.equals("view"))        {            if (command.hasSecondWord())            {                String item=command.getSecondWord();                viewItem(item);            }            else             {                System.out.println("View what?");            }        }        else if(commandWord.equals("inventory"))        {            System.out.println("Inventory: "+backpack);            System.out.println("Health: "+Health);            System.out.println("Money: "+balance);        }        else if (commandWord.equals("quit"))        {            if(command.hasSecondWord())                System.out.println("Quit what?");            else                return true;  // signal that we want to quit        }        return false;    }    /**     * Displays an image of the item input.     */    private void viewItem(String item)    {        if (item.equals("key") && alreadyHave("key"))        {            keyImage();         }        else if (item.equals("ticket") && alreadyHave("ticket"))        {            ticketImage();         }        else if (item.equals("T-shirt") && alreadyHave("T-shirt"))        {            tShirtImage();         }        else if (item.equals("map") && alreadyHave("map"))        {            mapImage();         }        else if (item.equals("sweatband") && alreadyHave("sweatband"))        {            sweatbandImage();         }        else        {            System.out.println("You do not have this item.");        }    }    /**     * Checks to see if the player used a special attack in the last five moves.     */    private boolean specialUsedLastFive()    {        if(attack_num>4 && (user_attack_history.substring(attack_num-5,attack_num-1)).indexOf("3")==-1 || attack_num<=4 && user_attack_history.indexOf("3")==-1)            return false;        else             return true;    }    /**     * Returns the item located in each room.     */    private String itemString()    {        if(currentRoom.equals(outside))        {            return "There is a ticket booth to your left selling tickets to the WWE SUPER SLAM for $30."+mobileItems();        }        else if(currentRoom.equals(lower_circle_S))        {            if(alreadyConsumedHotdog)                return "There is a vending machine to your left selling mega-fizz for $20." +mobileItems();            else                return "There is a hotdog on a table to your left. There is also a vending machine to your left selling mega-fizz for $20."+mobileItems();        }        else if(currentRoom.equals(lower_circle_N))        {            return "There is a store to your left selling John Cena T-shirts for $20. There is also a vending machine to your right selling power-pop for $40."+mobileItems();        }        else if(currentRoom.equals(roof))        {            return "What a beautiful view of the city!"+mobileItems();        }        else if(currentRoom.equals(TV_van))        {            return "There is a 10 hour Epic Sax Man video playing on one of the TV's."+mobileItems();        }        else         {            if(mobileItems().equals(""))                return "There is nothing unusual about this room.";            else                return mobileItems();        }    }    /**     * Returns a string describing the enemy in the room John Cena is in (if there is an enemy).     */    private void addEnemies()    {        if(currentRoom.equals(behind_TV_van) && tripleHAlive)        {            enemyString="Enemies: Triple H";        }        else if(currentRoom.equals(Back) && bigShowAlive)        {            enemyString="Enemies: Big Show";            }        else if (currentRoom.equals(enemyRoom) && undertakerAlive)        {            enemyString="Enemies: The Undertaker";        }        else if(currentRoom.equals(ring) && theRockAlive && !tripleHAlive && !bigShowAlive && !undertakerAlive)        {            enemyString="Enemies: Dwayne \"the rock\" Johnson";        }        else            enemyString="Enemies: None";    }    /**     * Returns a string describing any mobile items in a given room. Mobile items     * are items that John Cena can either grab or buy and put in his backpack.     */    private String mobileItems()    {        String total="";        if(currentRoom.equals(mapRoom) && !alreadyHave("map"))            total+= " There is a map in the room.";        if(currentRoom.equals(keyRoom) && !alreadyHave("key"))            total+= " There is a key in the room.";        if(currentRoom.equals(sweatBandRoom) && !alreadyHave("sweatband"))            total+= " There is a \"U Can't C Me\" sweatband in the room.";        if(currentRoom.equals(tShirtRoom) && alreadyBoughtTShirt && !alreadyHave("T-shirt"))// change later to account for item being bought or not            total+= " There is a John Cena T-shirt in the room.";        if(currentRoom.equals(ticketRoom) && alreadyBoughtTicket && !alreadyHave("Ticket"))             total+= " There is a ticket on the ground.";        return total;    }    /**     * Determines whether or not there is an enemy in a given room.     */    private boolean isEnemy()    {        if(currentRoom.equals(behind_TV_van) && tripleHAlive)        {            enemyNumber=1;            return true;        }        else if(currentRoom.equals(Back) && bigShowAlive)        {            enemyNumber=2;            return true;           }        else if (currentRoom.equals(enemyRoom) && undertakerAlive)        {            enemyNumber=3;            return true;        }        else if(currentRoom.equals(ring) && theRockAlive && !undertakerAlive && !bigShowAlive && !tripleHAlive)        {            enemyNumber=4;            return true;        }        else        {            enemyNumber=0;            return false;        }    }    /**     * Determines whether or not a given room is locked (i.e., if the player cannot access it).      */    private boolean isLocked(Room room, String direction)    {        if (room.equals(outside) && direction.equals("north") && hasTicket)        {            return false;        }        else if(room.equals(lower_circle_N) && direction.equals("east") && hasKey)        {            return false;        }        else         {            return true;        }    }    /**     * Print out some help information.     * Here we print some stupid, cryptic message and a list of the      * command words.     */    private void printHelp()     {        System.out.println("On your quest to defend your title, you will have to perform ");        System.out.println("a number of tasks, from fighting enemies to buying T-shirts to ");        System.out.println("eating hotdogs. Ultimately, you must defeat three enemies and ");        System.out.println("then win a final battle with Dwayne \"the rock\" Johnson to claim ");        System.out.println("WWE supremacy.");        System.out.println();        System.out.println("Your command words are:");        System.out.println("go --> moves the player in the given direction (north, south, etc,)");        System.out.println("help --> displays this screen");        System.out.println("look --> causes John Cena to look around the room for possible items, unusual features, etc.");        System.out.println("grab --> grabs onto an object and adds it to John Cena's backpack");        System.out.println("buy --> buys an item for John Cena and either adds it to the inventory or, with some items, consumes it directly");        System.out.println("drop --> takes an object out of John Cena's backpack and puts it on the ground");        System.out.println("eat --> eats food objects");        System.out.println("kick --> kicks an enemy during a fight");        System.out.println("punch --> punches an enemy during a fight");        System.out.println("special --> uses John Cena's special attack during a fight, can only be used once every 5 turns");        System.out.println("defend --> reduces damage taken by an enemy during a fight, but completely eliminates any damage ");        System.out.println("taken from an enemy special attack");        System.out.println("inventory --> opens up the inventory and allows the player to check what items they have");        System.out.println("view --> allows players to look at items within their inventory");        System.out.println("quit --> ends the game");    }    /**      * Try to go to one direction. If there is an exit, enter the new     * room, otherwise print an error message.     */    private void goRoom(Command command)     {        if(!command.hasSecondWord())        {            // if there is no second word, we don't know where to go...            System.out.println("Go where?");            return;        }        String direction = command.getSecondWord();        // Try to leave current room.        Room nextRoom = currentRoom.nextRoom(direction);        if(!direction.equals("back"))        {            if (nextRoom == null)                System.out.println("There is no door!");            else if(currentRoom.equals(outside) && direction.equals("north") && isLocked(outside,"north"))            {                System.out.println("You cannot enter the WWE SUPER SLAM without a ticket.");            }            else if(currentRoom.equals(lower_circle_N) && direction.equals("east") && isLocked(lower_circle_N,"east"))            {                System.out.println("This room needs a key.");            }            else             {                previousRoom=currentRoom;                currentRoom = nextRoom;                System.out.println(currentRoom.longDescription());                addEnemies();                System.out.println(enemyString);            }        }        else        {            storedRoom=currentRoom;            currentRoom=previousRoom;            previousRoom=storedRoom;            System.out.println(currentRoom.longDescription());            addEnemies();            System.out.println(enemyString);        }    }    /**     * Sets up the fight between John Cena and one of the enemies.     */    private void setUpFight()    {        if(enemyNumber==1)        {            if(attack_num==1)                enemyHealth=40;              lives=1;            punchDamage=20;            kickDamage=20;            specialDamage=30;            superMove="THE PEDIGREE";            rand1=1;            rand2=5;            rand3=7;            rand4=7;            name="Triple H";        }        else if(enemyNumber==2)        {            if(attack_num==1)                enemyHealth=80;            lives=1;            punchDamage=5;            kickDamage=15;            specialDamage=35;            superMove="THE CHOKESLAM";            rand1=1;            rand2=8;            rand3=4;            rand4=7;            name="Big Show";        }        else if(enemyNumber==3)        {            if(attack_num==1)                enemyHealth=60;            lives=1;            punchDamage=25;            kickDamage=10;            specialDamage=40;            superMove="THE TOMBSTONE";            rand1=2;            rand2=2;            rand3=11;            rand4=5;            name="The Undertaker";        }        else if(enemyNumber==4)        {            if(attack_num==1)                enemyHealth=100;            lives=1;            punchDamage=15;            kickDamage=30;            specialDamage=50;            superMove="THE ROCK BOTTOM";            rand1=3;            rand2=1;            rand3=5;            rand4=11;            name="Dwayne \"The Rock\" Johnson";        }    }    /**     * Causes the enemy to attempt a counter move against John Cena's attack.      * Attack number 1-->kick     * 2-->punch     * 3-->special     * 4-->defend     * Makes sure that the enemy waits at least 4 turns between special attacks.     */    private String enemyFight(int attack)    {        int random2=getRandomNumber2(20);        setUpFight();        result= name+"'s attack was:";        int count=0;        while(count<1)        {            count++;            if((random2<rand1 && attack_num>4 && (attack_history.substring(attack_num-5,attack_num-1)).indexOf("3")==-1)||(random2<rand1 && attack_num<=4 && attack_history.indexOf("3")==-1)) //special attack            {                if(attack==1)                {                    Health=Health-specialDamage;                    enemyHealth=enemyHealth-jKickDamage;                    result=result+" "+superMove+". You lost "+specialDamage+" health.";                    result=result+" The enemy lost "+jKickDamage+" health.";                    user_attack_history=user_attack_history+"2";                }                else if(attack==2)                {                    Health=Health-specialDamage;                    enemyHealth=enemyHealth-jPunchDamage;                    result=result+" "+superMove+". You lost "+specialDamage+" health.";                    result=result+" The enemy lost "+jPunchDamage+" health.";                    user_attack_history=user_attack_history+"1";                }                else if(attack==3)                {                    Health=Health-specialDamage;                    enemyHealth=enemyHealth-jSpecialDamage;                    result=result+" "+superMove+". You lost "+specialDamage+" health.";                    result=result+" The enemy lost "+jSpecialDamage+" health.";                    user_attack_history=user_attack_history+"3";                }                else if(attack==4)                {                    result=result+" "+superMove+". You lost no health because you defended.";                    result=result+" The enemy lost no health because you defended.";                    user_attack_history=user_attack_history+"4";                }                                attack_history=attack_history+"3";                attack_num++;            }            else if(random2>=rand1 && random2<(rand1+rand2)) //defend            {                if(attack==1)                {                    enemyHealth=enemyHealth-jKickDamage/2.0;                    result=result+" defend. You lost no health.";                    result=result+" The enemy lost "+jKickDamage/2.0+" health.";                    user_attack_history=user_attack_history+"2";                }                else if(attack==2)                {                    enemyHealth=enemyHealth-jPunchDamage/2.0;                    result=result+" defend. You lost no health.";                    result=result+" The enemy lost "+jPunchDamage/2.0+" health.";                    user_attack_history=user_attack_history+"1";                }                else if(attack==3)                {                    result=result+" defend. You lost no health.";                    result=result+" The enemy lost no health because he defended.";                    user_attack_history=user_attack_history+"3";                }                else if(attack==4)                {                    result=result+" defend. You lost no health.";                    result=result+" The enemy lost no health because you defended.";                    user_attack_history=user_attack_history+"4";                }                                attack_history=attack_history+"4";                attack_num++;            }            else if(random2>=(rand1+rand2) && random2<(rand1+rand2+rand3)) //punch            {                if(attack==1)                {                    Health=Health-2.0*punchDamage;                    enemyHealth=enemyHealth-jKickDamage;                    result=result+" punch. You lost "+2.0*punchDamage+" health.";                    result=result+" The enemy lost "+jKickDamage+" health.";                    user_attack_history=user_attack_history+"2";                }                else if(attack==2)                {                    Health=Health-punchDamage;                    enemyHealth=enemyHealth-jPunchDamage;                    result=result+" punch. You lost "+punchDamage+" health.";                    result=result+" The enemy lost "+jPunchDamage+" health.";                    user_attack_history=user_attack_history+"1";                }                else if(attack==3)                {                    Health=Health-punchDamage;                    enemyHealth=enemyHealth-jSpecialDamage;                    result=result+" punch. You lost "+punchDamage+" health.";                    result=result+" The enemy lost "+jSpecialDamage+" health.";                    user_attack_history=user_attack_history+"3";                }                else if(attack==4)                {                    Health=Health-punchDamage/2.0;                    result=result+" punch. You lost "+punchDamage/2.0+" health.";                    result=result+" The enemy lost no health because you defended.";                    user_attack_history=user_attack_history+"4";                }                                attack_history=attack_history+"1";                attack_num++;            }            else if(random2>=(rand1+rand2+rand3)) //kick            {                if(attack==1)                {                    Health=Health-kickDamage;                    enemyHealth=enemyHealth-jKickDamage;                    result=result+" kick. You lost "+kickDamage+" health.";                    result=result+" The enemy lost "+jKickDamage+" health.";                    user_attack_history=user_attack_history+"2";                }                else if(attack==2)                {                    Health=Health-kickDamage;                    enemyHealth=enemyHealth-2.0*jPunchDamage;                    result=result+" kick. You lost "+kickDamage+" health.";                    result=result+" The enemy lost "+jPunchDamage*2.0+" health.";                    user_attack_history=user_attack_history+"1";                }                else if(attack==3)                {                    Health=Health-kickDamage;                    enemyHealth=enemyHealth-jSpecialDamage;                    result=result+" kick. You lost "+kickDamage+" health.";                    result=result+" The enemy lost "+jSpecialDamage+" health.";                    user_attack_history=user_attack_history+"3";                }                else if(attack==4)                {                    Health=Health-kickDamage/2.0;                    result=result+" kick. You lost "+kickDamage/2.0+" health.";                    result=result+" The enemy lost no health because you defended.";                    user_attack_history=user_attack_history+"4";                }                               attack_history=attack_history+"2";                attack_num++;            }            else            {                count--;                random2=getRandomNumber2(20);            }        }        concludeFight();        return result;    }    /**     * Ends the given attack sequence during a fight.     */    private void concludeFight()    {        if(enemyHealth<=0 && Health>0)        {            attack_num=1;            user_attack_history="";            attack_history="";            if (name.equals("Triple H"))            {                tripleHAlive=false;                result+="\n"+"Triple H has been defeated!";            }            else if(name.equals("Big Show"))            {                bigShowAlive=false;                      result+="\n"+"Big Show has been defeated!";            }            else if(name.equals("The Undertaker"))               {                undertakerAlive=false;                  result+="\n"+"The Undertaker has been defeated!";            }            else if(name.equals("Dwayne \"The Rock\" Johnson"))                        {                theRockAlive=false;                result+="\n"+"The Rock has been defeated!";            }        }        result="Health: "+Health + "\n" + "Enemy Health: "+ enemyHealth+ "\n"+result;        if(Health<=0)        {            playerAlive=false;            finished=true;            result+="\n"+ "You have been K.O.'ed. "+name+" is WWE SUPER SLAM CHAMPION!";            if(name.equals("Triple H"))            {                sounds.tripleHSounds();                tripleHImage();            }            else if(name.equals("Big Show"))            {                sounds.bigShowSounds();                bigShowImage();            }            else if(name.equals("The Undertaker"))            {                sounds.undertakerSounds();                undertakerImage();            }            else if(name.equals("Dwayne \"The Rock\" Johnson"))            {                sounds.theRockSounds();                theRockImage();            }        }    }    /**     * Prints out an image of John Cena.     */    public  void johnCenaImage() {        try{            URL url = new URL("http://www.allwrestlingsuperstars.com/wp-content/uploads/1734/John-Cena-WWE-Superstar-60.jpg");            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * Prints out an image of The Undertaker.     */    public  void undertakerImage() {        try{            URL url = new URL("http://csrwrestling.com/wp-content/uploads/2015/08/Undertaker-wwe-04_crop_north.jpg");            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * Prints out an image of Triple H.     */    public void tripleHImage() {        try{            URL url = new URL("http://cache.onlineworldofwrestling.com/wp-content/uploads/2012/06/Triple-H-2.jpeg");            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * Prints out an image of Big Show.     */    public  void bigShowImage() {        try{            URL url = new URL("http://cdn2.holytaco.com/wp-content/uploads/2011/01/bigshow.jpg");            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * Prints out an image of Dwayne "the rock" Johnson.     */    public  void theRockImage() {        try{            URL url = new URL("http://img.bleacherreport.net/img/images/photos/002/427/752/rock2_crop_north.jpg?w=535&h=357&q=75");            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * Prints out an image of the key.     */    public  void keyImage(){        try{            String path = "https://community.qlik.com/servlet/JiveServlet/showImage/38-3573-52526/Key.jpg";            URL url = new URL(path);            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * Prints out an image of the ticket.     */    public  void ticketImage() {        try{            String path = "http://i.ebayimg.com/00/z/rv0AAOxygj5SlMWn/$_32.JPG";            URL url = new URL(path);            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * Prints out an image of the T-shirt.     */    public  void tShirtImage() {        try{            String path = "http://ep.yimg.com/ay/stylinonline/wwe-john-cena-can-t-see-me-t-shirt-4.jpg";            URL url = new URL(path);            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * Prints out an image of the sweatband.     */    public  void sweatbandImage() {        try{            String path = "http://thumbs2.ebaystatic.com/d/l225/m/m_mfpahfVLYQ_KULgLKlo8g.jpg";            URL url = new URL(path);            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * Prints out an image of the map.     */    public  void mapImage() {        try{            String path = "http://s21.postimg.org/hbbxrluh3/image_16.jpg";            URL url = new URL(path);            BufferedImage image = ImageIO.read(url);            JLabel label = new JLabel(new ImageIcon(image));            JFrame f = new JFrame();            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            f.getContentPane().add(label);            f.pack();            f.setLocation(200,200);            f.setVisible(true);        }        catch (IOException e){            e.printStackTrace();        }        catch(NullPointerException e){            e.printStackTrace();        }    }    /**     * returns a random number from 0 to high-1     * i.e. getRandomNumber(10) would return a random number from 0 to 9.     */    private int getRandomNumber2(int high)    {        java.util.Random rand = new java.util.Random();        return rand.nextInt(high);    }}